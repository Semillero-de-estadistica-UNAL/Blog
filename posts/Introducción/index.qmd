---
title: "Primera Sesión"
author: "Julian C"
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    code-tools: true
    bibliography: ref.bib
date: "2023-11-16"
categories: [news, code, analysis]
image: "imagen.jpg"
---

```{r, echo=FALSE}
library(kableExtra)
```

Bienvenido a esta sesión introductoria sobre R, un lenguaje de programación estadística. En esta sesión, abordaremos desde la instalación de R y RStudio hasta la manipulación de variables, estructuras como vectores y matrices, y la implementación de condicionales en R.

# Instalación

## Instalación de R

Para comenzar, necesitas instalar R en tu sistema. Puedes hacerlo siguiendo estos pasos:

1.  Visita la página de descargas de R: [Descargas de R](https://cran.r-project.org/).

2.  Selecciona un espejo cercano y haz clic en el enlace para tu sistema operativo (por ejemplo, Windows, macOS, o Linux).

3.  Sigue las instrucciones de instalación proporcionadas en la página.

## Instalación de RStudio

Una vez que hayas instalado R, puedes instalar RStudio, un entorno de desarrollo integrado (IDE) para R. Sigue estos pasos:

1.  Visita la página de descargas de RStudio: [Descargas de RStudio](https://www.rstudio.com/products/rstudio/download/).

2.  Selecciona la versión gratuita de RStudio Desktop según tu sistema operativo.

3.  Descarga el instalador y sigue las instrucciones para instalar RStudio en tu máquina.

# Verificación de la instalación

Después de completar la instalación, puedes verificar si R y RStudio están instalados correctamente. Abre RStudio y ejecuta el siguiente código en la consola de R:

```{r}
R.version$version.string
```

# Tipos de Variables

En estadística es útil clasificar los tipos de datos por la forma y propiedades que manejan, en este sentido existen las siguientes clases de datos o variables con las que se trabaja.

-   Variables Numéricas

    -   Variable continua : Se mide

    -   Variable discretas : Se cuenta

-   Variables Categóricas

    -   Variable Nominal : Se clasifica

        -   Variable Dummy

    -   Variable Ordinal : Se jerarquiza

-   Varaibles tipo Caracter : Sirve para identificar

```{mermaid}
flowchart TD
    A(Variables) --> B(Numéricas)
    A(Variables) --> C(Categóricas)
    A(Variables) --> D(Caracter)
    B --> E(Discretas)
    B --> F(Continuas)
    C --> G(Nominales)
    C --> H(Ordinales)
    E --> I[/Cuentan\]
    F --> J[/Miden\]
    G --> K[/Clasifican\]
    H --> L[/Jerarquizan\]
    D ---> N[/Identifican\]
```

```{r}
set.seed(1)
datos <- data.frame(id = sample(10000:99999, 10, replace = FALSE),
                    sexo = sample(c("Hombre","Mujer",NA),10,replace = T),
                    estatura = round(runif(10,150,190),1),
                    estrato = sample(1:6,10, replace = T),
                    edad = sample(20:40, 10,replace = T),
                    fuma = sample(0:1,10, replace = T))
                    
kbl(datos)

```

**¿Cómo se ven estas Variables en R?**

En R para ver cual es el tipo de clase de un objeto se usa la función `class()`. En las variables mencionadas la nomenclatura en R es la siguiente

-   Variable Numérica discreta `int`
-   Variable Numérica continua `numeric`
-   Variable Categórica nominal `factor`
-   Variable Categórica ordinal `factor` con niveles organizados
-   Variable Caracter `Character`

La función `str()` nos permite ver la estructura de las variables de un data frame

```{r}
str(datos)
```

La forma en que se muestran los datos en la tabla es aparentemente adecuada, sin embargo, vemos que la clase de las variables no corresponden a la lógica de los datos.

```{r}
datos$id <- as.character(datos$id)
datos$sexo <- factor(datos$sexo)
datos$estrato <- factor(datos$estrato, levels=c(1,2,3,4,5,6),
                        labels = c("est1","est2","est3","est4","est5","est6"))
datos$fuma <- factor(datos$fuma)
```

```{r}
kbl(datos)
str(datos)

```

# Estructura de datos y arreglos

## Vectores

Un vector es una estructura de datos unidimensional que puede contener elementos del mismo tipo, como números, caracteres o lógicos.

Puedes crear vectores utilizando la función `c()` (concatenate) o funciones específicas como `numeric()`, `character()`, `logical()`, etc.

```{r}
# Ejemplo de vector numérico
vector_numerico <- c(1, 2, 3, 4, 5)
# Ejemplo de vector de caracteres
vector_caracteres <- c("a", "b", "c")
# Ejemplo de vector lógico
vector_logico <- c(TRUE, TRUE, TRUE)

# Jerarquia de los vectores 
char_num <- c(1, 2, "a")
num_bol <- c(FALSE, 7, TRUE)
char_bol <- c(FALSE, TRUE, "a")
all <- c(FALSE, 3, "a")
cat( char_num,"\n" ,num_bol,"\n", char_bol,"\n", all)
```

## Matrices

Una matriz es una estructura bidimensional que contiene elementos del mismo tipo.

Se puede crear utilizando la función `matrix().`

```{r}
# Crear una matriz
matriz <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
matriz

```

## Array

Un array es una generalización de una matriz que puede tener más de dos dimensiones. Se crea con la función **`array()`**.

```{r}
matriz1 <- matrix(1:4, nrow = 2)
matriz2 <- matrix(5:8, nrow = 2)

# Crear un array que contenga las dos matrices anteriores
matriz_de_matrices <- array(c(matriz1, matriz2), dim = c(2, 2, 2))

# Imprimir el array de matrices
print(matriz_de_matrices)

```

## Data frame

Un data frame es similar a una matriz, pero puede contener columnas de diferentes tipos. Es una estructura de datos muy utilizada en análisis de datos.

```{r}
data_df <- data.frame(
  nombre = c("Juan", "María", "Carlos"),
  edad = c(25, 30, 22),
  soltero = c(TRUE, FALSE, TRUE)
)
data_df

```

## Lista

Una lista es una estructura de datos que puede contener elementos de diferentes tipos. Cada elemento de la lista puede ser accedido mediante su índice o su nombre.

```{r}
# Crear una lista
mi_lista <- list(nombre = "Juan", edad = 25, soltero = TRUE,
                 df = data_df, array = matriz_de_matrices)

mi_lista 
```

# Condicionales

En R, los condicionales son estructuras que permiten ejecutar bloques de código dependiendo de si una condición es verdadera o falsa. Los condicionales más comunes son `if`, `else if` y `else`.

Para evaluar la ocurrencia de una condición se debe hacer uso de los operadores lógicos.

## Operadores logicos

| Operador       | Descripción                        | Ejemplo                          | Resultado (Ejemplo) |
|----------------|-------------------------|----------------|----------------|
| `==`           | Igual a                            | `2 == 2`                         | `TRUE`              |
| `!=`           | No igual a                         | `3 != 5`                         | `TRUE`              |
| `<`            | Menor que                          | `4 < 7`                          | `TRUE`              |
| `<=`           | Menor o igual que                  | `6 <= 6`                         | `TRUE`              |
| `>`            | Mayor que                          | `9 > 3`                          | `TRUE`              |
| `>=`           | Mayor o igual que                  | `5 >= 5`                         | `TRUE`              |
| `!`            | Negación (not)                     | `!TRUE`                          | `FALSE`             |
| `&`            | AND lógico (elemento por elemento) | `c(TRUE, FALSE) & c(TRUE, TRUE)` | `c(TRUE, FALSE)`    |
| `&&`           | AND lógico (escalar)               | `TRUE && FALSE`                  | `FALSE`             |
| `|`            | OR lógico (elemento por elemento)  | `c(TRUE, FALSE) | c(TRUE, TRUE)` | `c(TRUE, TRUE)`     |
| `||`           | OR lógico (escalar)                | `TRUE || FALSE`                  | `TRUE`              |
| `%in%`         | Pertenencia a un conjunto          | `3 %in% c(1, 2, 3, 4)`           | `TRUE`              |
| `is.numeric`   | Verificar si es numérico           | `is.numeric(42)`                 | `TRUE`              |
| `is.character` | Verificar si es caracter           | `is.character("Hola")`           | `TRUE`              |
| `is.logical`   | Verificar si es lógico             | `is.logical(TRUE)`               | `TRUE`              |

## Condicional `if`

Supongamos que tenemos una variable `edad` y queremos imprimir un mensaje dependiendo de si la persona es mayor de edad.
```{r}
edad <- c(20)
if (edad >= 18) {
  mensaje <- "La persona es mayor de edad."
} else {
  mensaje <- "La persona es menor de edad."
}
mensaje
```

## Condicional `else`

```{r}
edad <- 25

if (edad < 18) {
  mensaje <- "La persona es menor de edad."
} else if (edad >= 18 & edad < 65) {
  mensaje <- "La persona es adulta."
} else {
  mensaje <- "La persona es adulta mayor."
}

print(mensaje)
```
## Función `ifelse()`

La función `ifelse()` nos permite vectorizar la operación de condicionales en un formato funcional. 

Con `if` solo se podía evaluar una única condición, con la función `ifelse()` se pueden evaluar múltiples condiciones a la vez.

```{r}
set.seed(1)
edades <- rpois(15,18)
resultado = ifelse(edades < 18,
                   "Es menor de edad",
                   "Es mayor de edad")
edades
resultado
```

# Ciclos 
En R, los ciclos son estructuras de control que permiten repetir un bloque de código varias veces. Los ciclos son esenciales para automatizar tareas repetitivas. En esta clase, exploraremos los principales tipos de ciclos en R: for, while, y repeat.

## Ciclo for 
El ciclo for es utilizado para iterar sobre una secuencia definida de elementos. Su sintaxis básica es la siguiente:

```{r}
for (i in 1:5) {
  print(i)
}
```


## Ciclo while 
El ciclo while se ejecuta siempre que una condición sea verdadera. Su sintaxis es la siguiente:

```{r}

i <- 1
while (i <= 5) {
  print(i)
  i <- i + 1
}

```

## Repeat
repeat se ejecuta indefinidamente hasta que se encuentre una instrucción de salida. Su sintaxis es la siguiente:

```{r}
i <- 1
repeat {
  print(i)
  i <- i + 1
  if (i > 5) {
    break
  }
}
```

**Ciclo for:**
* Cuando conoces la cantidad de iteraciones de antemano: El ciclo for es útil cuando puedes definir la cantidad exacta de veces que deseas que se ejecute el código.
* Iteración sobre secuencias predefinidas: Si tienes una secuencia de elementos (por ejemplo, un vector o una lista) sobre la cual deseas iterar, el ciclo for es conveniente.

**Ciclo while:**
* Cuando la condición de terminación no se conoce de antemano: Si no puedes determinar de antemano cuántas veces se ejecutará el código y la condición de terminación se evalúa dinámicamente, el ciclo while es apropiado.
* Para situaciones en las que la lógica de la iteración es más compleja: El ciclo while es útil cuando la condición de terminación es más compleja y no puede expresarse fácilmente en términos de una secuencia predeterminada.

**Ciclo repeat:**
* Cuando se necesita una ejecución indefinida hasta que se cumpla una condición: El ciclo repeat es útil cuando deseas ejecutar un bloque de código repetidamente sin conocer la cantidad exacta de iteraciones y planeas salir del ciclo usando una declaración break basada en una condición específica.
* Para tareas que requieren flexibilidad extrema en la lógica de iteración: El ciclo repeat te brinda la máxima flexibilidad, pero debes tener cuidado de incluir una condición de salida para evitar bucles infinitos.

# Funciones

Una función en programación es un bloque de código que realiza una tarea específica y puede ser reutilizado en diferentes partes de un programa. Las funciones ayudan a organizar el código, facilitan la modularidad y mejoran la legibilidad y mantenimiento del código. 

```{r}
sumar <- function(a, b) {
  resultado <- a + b
  return(resultado)
}

resultado_suma <- sumar(3, 5)
resultado_suma
```
# Juntando todo

```{r}

```

# Referencias 

* R para principiantes Juan Bosco Mendoza Vega [bookdown](https://bookdown.org/jboscomendoza/r-principiantes4/).
